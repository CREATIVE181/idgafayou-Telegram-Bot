from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Command, IDFilter
import aiogram.utils.markdown as fmt

from CONFIG import owners, easy_sql, chats, bot
from utils.find_id import find_id
from utils.create_link_user import link_user


async def help_owner(message: types.Message):
    await message.answer('''
<b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞:</b>

1) /up_admin | /down_admin - –¥–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞;
2) /list_admin - —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤;
3) /–Ω–∞–∫—Ä—É—Ç–∏—Ç—å | /–æ–±–Ω—É–ª–∏—Ç—å - –¥–µ–π—Å—Ç–≤–∏—è —Å –±–∞–ª–∞–Ω—Å–æ–º (–ª–∏–º–∏—Ç 100.000);
4) /id - –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å, —Ç–æ –ø–æ–∫–∞–∂–µ—Ç –∞–π–¥–∏ —á–∞—Ç–∞;
5) /declare - —Å–æ–∑–¥–∞–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö;
''')


async def up_admin(message: types.Message):
    user_id = await find_id(message)
    if user_id is False:
        return await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ!')
    check_admin = easy_sql.check_value(f'SELECT * from admins WHERE id = {user_id}')
    if check_admin is not False:
        return await message.answer('–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º!')
    easy_sql.insert_into(f'INSERT INTO admins VALUES ({user_id})')
    return await message.answer('–ê–¥–º–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω!')


async def down_admin(message: types.Message):
    user_id = await find_id(message)
    if user_id is False:
        return await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ!')
    check_admin = easy_sql.check_value(f'SELECT * from admins WHERE id = {user_id}')
    if check_admin is False:
        return await message.answer('–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º!')
    easy_sql.delete(f'DELETE FROM admins WHERE id = {user_id}')
    return await message.answer('–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω!')
    

async def list_admin(message: types.Message):
    id_admins = [
        admin[0]
        for admin in easy_sql.select('SELECT * FROM admins', fetch='all')
    ]
    name_and_id_admins = [(easy_sql.select(f'SELECT first_name FROM users WHERE id = {id_admin}')[0], id_admin) for id_admin in id_admins]
    msg_with_admins = '<b>–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:</b>\n\n'
    numb = 1
    for name, adm_id in name_and_id_admins:
        admin = f'{numb}) {await link_user(adm_id, name)} - <code>{adm_id}</code>\n'
        msg_with_admins += admin
        numb += 1
    return await message.answer(msg_with_admins)


async def wind_up_owner(message: types.Message):
    user_id = await find_id(message)
    if user_id is False:
        user_id = message.from_user.id
    money = int(message.text.split()[1])
    if money > 100_000:
        return await message.answer('–õ–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω!')
    easy_sql.update(f'UPDATE wallet SET balance = balance + {money} WHERE id = {user_id}')
    return await message.answer(f'–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <b>{money}</b>ü¶é!')


async def wind_down_owner(message: types.Message):
    user_id = await find_id(message)
    if user_id is False:
        user_id = message.from_user.id
    easy_sql.update(f'UPDATE wallet SET balance = 0 WHERE id = {user_id}')
    return await message.answer('–ë–∞–ª–∞–Ω—Å –æ–±–Ω—É–ª–µ–Ω!')


async def id_user_or_chat(message: types.Message):
    user_id = await find_id(message)
    if len(message.text.split()) == 1 and user_id is False:
        return await message.answer(f'–ê–π–¥–∏ —á–∞—Ç–∞: <code>{message.chat.id}</code>')
    elif user_id is False:
        return await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ!')
    else:
         return await message.answer(f'–ê–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{user_id}</code>')
    

async def declare(message: types.Message):
    msg = message.text.split('\n', maxsplit=1)[1]
    owner_link = f'<b>{await link_user(message.from_user.id, message.from_user.first_name)} –û–ë–™–Ø–í–õ–Ø–ï–¢:\n\n</b>'
    for chat in chats:
        try:    
            await bot.send_message(chat, text=owner_link + fmt.quote_html(msg))
            await message.answer(f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ‚úÖ | <b>{chat}</b>')
        except Exception:
            await message.answer(f'–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ‚ùå | <b>{chat}</b>')


async def amnesty(message: types.Message):
    easy_sql.delete('DELETE FROM warns')
    await message.answer('–í—Å–µ –≤–∞—Ä–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É–¥–∞–ª–µ–Ω—ã!')


def owner_commands(dp: Dispatcher):
    dp.register_message_handler(help_owner, Command(['–≤–ª–∞–¥–µ–ª–µ—Ü'], prefixes='!/.', ignore_case=True), IDFilter(user_id=owners)) # +
    dp.register_message_handler(up_admin, Command(['up_admin'], prefixes='!/.', ignore_case=True), IDFilter(user_id=owners)) # +
    dp.register_message_handler(down_admin, Command(['down_admin'], prefixes='!/.', ignore_case=True), IDFilter(user_id=owners)) # +
    dp.register_message_handler(list_admin, Command(['list_admin'], prefixes='!/.', ignore_case=True), IDFilter(user_id=owners)) # +
    dp.register_message_handler(wind_up_owner, Command(['–Ω–∞–∫—Ä—É—Ç–∏—Ç—å'], prefixes='!/.', ignore_case=True), IDFilter(user_id=owners)) # +
    dp.register_message_handler(wind_down_owner, Command(['–æ–±–Ω—É–ª–∏—Ç—å'], prefixes='!/.', ignore_case=True), IDFilter(user_id=owners)) # +
    dp.register_message_handler(id_user_or_chat, Command(['id'], prefixes='!/.', ignore_case=True), IDFilter(user_id=owners)) # +
    dp.register_message_handler(declare, Command(['declare'], prefixes='!/.', ignore_case=True), IDFilter(user_id=owners)) # +
    # dp.register_message_handler(amnesty, Command(['–∞–º–Ω–∏—Å—Ç–∏—è'], prefixes='!/.', ignore_case=True), IDFilter(user_id=owners)) # +